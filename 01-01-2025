question- leetcode- 
*https://leetcode.com/problems/maximum-score-after-splitting-a-string/description/?envType=daily-question&envId=2025-01-01*
approach- 
Here's a concise explanation for solving the problem of finding the maximum score after splitting the string into two non-empty substrings:

### Explanation:

1. **Problem Statement**: Given a string `s` consisting of '0's and '1's, the goal is to split it into two non-empty substrings such that the score is maximized. The score is defined as the number of '0's in the left substring plus the number of '1's in the right substring.

2. **Optimal Approach**:
   - **Count Zeroes**: First, count the total number of '0's in the string.
   - **Iterate from Right**: Traverse the string from right to left while counting the number of '1's (`one`) and adjusting the count of '0's (`newZero`).
   - **Update Score**: At each position, update the maximum score based on the current count of '1's and '0's. Use `one - (i == 0) + (zeroes - newZero)` to consider the split point.

### Complexity:
- **Time Complexity**: O(n)
- **Space Complexity**: O(1)

### Example:
- Input: `s = "011101"`
- Possible splits and their scores:
  - Split at "0" and "11101" → Score = 1 + 4 = 5
  - Split at "01" and "1101" → Score = 1 + 3 = 4
  - Split at "011" and "101" → Score = 1 + 2 = 3
  - Split at "0111" and "01" → Score = 1 + 1 = 2
  - Split at "01110" and "1" → Score = 2 + 1 = 3

- Maximum Score: **5**

This method ensures we efficiently find the split point that maximizes the score.
code- 
class Solution{
    public:
    int maxScore(string s ){
        int one = 0;
        int zero =0;
        int ans =0;
        for (int i =1; i< s.size(); i++){
            if (s[i]=='1')one ++;
        }
        for (int i =1;i< s.size(); i++){
            if(s[i-1]== '0')zero++;
            ans=max(ans,one
            +zero);
            if(s[i]=='1')one--;
        }
        return ans;
    }
};
